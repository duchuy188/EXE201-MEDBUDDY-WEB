const cron = require('node-cron');
const User = require('../models/User');
const fcmService = require('../services/fcmService');

// Job ki·ªÉm tra g√≥i h·∫øt h·∫°n - ch·∫°y m·ªói ng√†y l√∫c 00:00
const packageExpiryJob = cron.schedule('0 0 * * *', async () => {
  try {
    console.log('üîÑ [PACKAGE-JOB] ƒêang ki·ªÉm tra g√≥i h·∫øt h·∫°n...');
    
    const now = new Date();
    const currentDate = now.getFullYear() + '-' + (now.getMonth() + 1).toString().padStart(2, '0') + '-' + now.getDate().toString().padStart(2, '0');
    
    // T√¨m c√°c user c√≥ g√≥i h·∫øt h·∫°n h√¥m nay
    const expiredUsers = await User.find({
      'activePackage.isActive': true,
      'activePackage.endDate': { $lt: now }
    }).populate('activePackage.packageId');

    if (expiredUsers.length > 0) {
      console.log(`üì¢ [PACKAGE-JOB] T√¨m th·∫•y ${expiredUsers.length} g√≥i h·∫øt h·∫°n`);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i g√≥i h·∫øt h·∫°n
      await User.updateMany(
        {
          'activePackage.isActive': true,
          'activePackage.endDate': { $lt: now }
        },
        {
          'activePackage.isActive': false
        }
      );

      // G·ª≠i th√¥ng b√°o cho user c√≥ g√≥i h·∫øt h·∫°n
      for (const user of expiredUsers) {
        try {
          
          const tokens = await require('../models/NotificationToken').find({ userId: user._id });
          const NotificationHistory = require('../models/NotificationHistory');
          
          for (const tokenDoc of tokens) {
            console.log(`üì± [PACKAGE-JOB] G·ª≠i th√¥ng b√°o h·∫øt h·∫°n cho user ${user._id}`);
            
            await fcmService.sendNotification(
              String(tokenDoc.deviceToken),
              'G√≥i d·ªãch v·ª• h·∫øt h·∫°n',
              `G√≥i ${user.activePackage.packageId.name} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng.`,
              'default'
            );
            
            await NotificationHistory.create({
              userId: user._id,
              title: 'G√≥i d·ªãch v·ª• h·∫øt h·∫°n',
              body: `G√≥i ${user.activePackage.packageId.name} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng.`,
              deviceToken: tokenDoc.deviceToken,
              sentAt: new Date(),
              sound: 'default'
            });
          }
        } catch (notificationError) {
          console.error(`‚ùå [PACKAGE-JOB] L·ªói g·ª≠i th√¥ng b√°o cho user ${user._id}:`, notificationError);
        }
      }
      
      console.log(`‚úÖ [PACKAGE-JOB] ƒê√£ x·ª≠ l√Ω ${expiredUsers.length} g√≥i h·∫øt h·∫°n`);
    } else {
      console.log('‚úÖ [PACKAGE-JOB] Kh√¥ng c√≥ g√≥i n√†o h·∫øt h·∫°n h√¥m nay');
    }
    
  } catch (error) {
    console.error('‚ùå [PACKAGE-JOB] L·ªói ki·ªÉm tra g√≥i h·∫øt h·∫°n:', error);
  }
}, {
  scheduled: false, 
  timezone: "Asia/Ho_Chi_Minh"
});

// Job ki·ªÉm tra g√≥i s·∫Øp h·∫øt h·∫°n - ch·∫°y m·ªói ng√†y l√∫c 09:00
const packageExpiringSoonJob = cron.schedule('0 9 * * *', async () => {
  try {
    console.log('üîÑ [PACKAGE-JOB] ƒêang ki·ªÉm tra g√≥i s·∫Øp h·∫øt h·∫°n...');
    
    const now = new Date();
    const futureDate = new Date();
    futureDate.setDate(futureDate.getDate() + 3); 
    
    // T√¨m c√°c user c√≥ g√≥i s·∫Øp h·∫øt h·∫°n trong 3 ng√†y
    const expiringUsers = await User.find({
      'activePackage.isActive': true,
      'activePackage.endDate': { $lte: futureDate, $gt: now }
    }).populate('activePackage.packageId');

    if (expiringUsers.length > 0) {
      console.log(`üì¢ [PACKAGE-JOB] T√¨m th·∫•y ${expiringUsers.length} g√≥i s·∫Øp h·∫øt h·∫°n`);
      
      // G·ª≠i th√¥ng b√°o cho user c√≥ g√≥i s·∫Øp h·∫øt h·∫°n
      for (const user of expiringUsers) {
        try {
          const daysRemaining = Math.ceil((user.activePackage.endDate - now) / (1000 * 60 * 60 * 24));
          
         
          const tokens = await require('../models/NotificationToken').find({ userId: user._id });
          const NotificationHistory = require('../models/NotificationHistory');
          
          for (const tokenDoc of tokens) {
            console.log(`üì± [PACKAGE-JOB] G·ª≠i th√¥ng b√°o s·∫Øp h·∫øt h·∫°n cho user ${user._id}`);
            
            await fcmService.sendNotification(
              String(tokenDoc.deviceToken),
              'G√≥i d·ªãch v·ª• s·∫Øp h·∫øt h·∫°n',
              `G√≥i ${user.activePackage.packageId.name} c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong ${daysRemaining} ng√†y. Vui l√≤ng gia h·∫°n s·ªõm!`,
              'default'
            );
            
            await NotificationHistory.create({
              userId: user._id,
              title: 'G√≥i d·ªãch v·ª• s·∫Øp h·∫øt h·∫°n',
              body: `G√≥i ${user.activePackage.packageId.name} c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong ${daysRemaining} ng√†y. Vui l√≤ng gia h·∫°n s·ªõm!`,
              deviceToken: tokenDoc.deviceToken,
              sentAt: new Date(),
              sound: 'default'
            });
          }
        } catch (notificationError) {
          console.error(`‚ùå [PACKAGE-JOB] L·ªói g·ª≠i th√¥ng b√°o cho user ${user._id}:`, notificationError);
        }
      }
      
      console.log(`‚úÖ [PACKAGE-JOB] ƒê√£ g·ª≠i th√¥ng b√°o cho ${expiringUsers.length} g√≥i s·∫Øp h·∫øt h·∫°n`);
    } else {
      console.log('‚úÖ [PACKAGE-JOB] Kh√¥ng c√≥ g√≥i n√†o s·∫Øp h·∫øt h·∫°n');
    }
    
  } catch (error) {
    console.error('‚ùå [PACKAGE-JOB] L·ªói ki·ªÉm tra g√≥i s·∫Øp h·∫øt h·∫°n:', error);
  }
}, {
  scheduled: false, 
  timezone: "Asia/Ho_Chi_Minh"
});

// H√†m start t·∫•t c·∫£ jobs
const startPackageJobs = () => {
  console.log('üöÄ [PACKAGE-JOB] Starting package management jobs...');
  
  packageExpiryJob.start();
  packageExpiringSoonJob.start();
  
  console.log('‚úÖ [PACKAGE-JOB] Package management jobs started successfully');
};

// H√†m stop t·∫•t c·∫£ jobs
const stopPackageJobs = () => {
  console.log('üõë [PACKAGE-JOB] Stopping package management jobs...');
  
  packageExpiryJob.stop();
  packageExpiringSoonJob.stop();
  
  console.log('‚úÖ [PACKAGE-JOB] Package management jobs stopped');
};


const runPackageExpiryCheck = async () => {
  try {
    console.log('üîÑ [PACKAGE-JOB] Running package expiry check manually...');
    
    const now = new Date();
    const expiredUsers = await User.find({
      'activePackage.isActive': true,
      'activePackage.endDate': { $lt: now }
    }).populate('activePackage.packageId');
    
    console.log(`‚úÖ [PACKAGE-JOB] Found ${expiredUsers.length} expired packages`);
    
    return expiredUsers;
  } catch (error) {
    console.error('‚ùå [PACKAGE-JOB] Error in manual package expiry check:', error);
    throw error;
  }
};

const runPackageExpiringSoonCheck = async () => {
  try {
    console.log('üîÑ [PACKAGE-JOB] Running package expiring soon check manually...');
    
    const now = new Date();
    const futureDate = new Date();
    futureDate.setDate(futureDate.getDate() + 7);
    
    const expiringUsers = await User.find({
      'activePackage.isActive': true,
      'activePackage.endDate': { $lte: futureDate, $gt: now }
    }).populate('activePackage.packageId');
    
    console.log(`‚úÖ [PACKAGE-JOB] Found ${expiringUsers.length} packages expiring soon`);
    
    return expiringUsers;
  } catch (error) {
    console.error('‚ùå [PACKAGE-JOB] Error in manual package expiring soon check:', error);
    throw error;
  }
};

module.exports = {
  packageExpiryJob,
  packageExpiringSoonJob,
  startPackageJobs,
  stopPackageJobs,
  runPackageExpiryCheck,
  runPackageExpiringSoonCheck
};
